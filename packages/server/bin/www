#!/usr/bin/env node

process.on('unhandledRejection', (err) => {
  console.log(err);
  process.exit(1);
});

import { app } from '../src';
import http from 'http';

const port = normalizePort(process.env.PORT || '3000');

app.set('port', port);
const server = http.createServer(app);

server.listen(port);

server.on('error', function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.on('listening', () => {
  console.log(`Server Details: ${JSON.stringify(server.address(), null, 2)}`)
});

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}
